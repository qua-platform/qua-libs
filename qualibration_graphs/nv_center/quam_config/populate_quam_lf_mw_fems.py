"""
This script is used to populate the quam generated by running generate_quam.py with initial values based on previous
calibrations or chip manufacturer specs and must be run prior to conducting the first experiment.
It is split according to the component to update (laser/spcm, qubit drive) and allows the user to specify
the different frequencies and power involved. Other parameters are directly related to the control hardware such as
full_scale_power_dbm, band, upsampling_mode...
The last section is dedicated to adding pulses for the single qubit gates and setting the initial values for the
readout and saturation pulses.
"""

########################################################################################################################
# %%                                             Import section
########################################################################################################################
import json
from qualang_tools.units import unit
from my_quam import Quam
from quam_builder.architecture.nv_center.components.spcm import SPCM
from quam.components.pulses import Pulse, SquarePulse, GaussianPulse, ReadoutPulse
from quam.components.channels import TimeTaggingAddon
from quam.components.ports import LFFEMAnalogInputPort, LFFEMAnalogOutputPort
import numpy as np

from quam_builder.architecture.nv_center.components.laser import (
    LaserLFAnalog,
    LaserLFDigital,
)
from quam.components import Channel, DigitalOutputChannel


########################################################################################################################
# %%                                 QUAM loading and auxiliary functions
########################################################################################################################
# Loads the QUAM
machine = Quam.load()
# Class containing tools to help handling units and conversions.
u = unit(coerce_to_integer=True)


def get_band(freq):
    """Determine the MW fem DAC band corresponding to a given frequency.

    Args:
        freq (float): The frequency in Hz.

    Returns:
        int: The Nyquist band number.
            - 1 if 50 MHz <= freq < 5.5 GHz
            - 2 if 4.5 GHz <= freq < 7.5 GHz
            - 3 if 6.5 GHz <= freq <= 10.5 GHz

    Raises:
        ValueError: If the frequency is outside the MW fem bandwidth [50 MHz, 10.5 GHz].
    """
    if 50e6 <= freq < 5.5e9:
        return 1
    elif 4.5e9 <= freq < 7.5e9:
        return 2
    elif 6.5e9 <= freq <= 10.5e9:
        return 3
    else:
        raise ValueError(f"The specified frequency {freq} Hz is outside of the MW fem bandwidth [50 MHz, 10.5 GHz]")


# %%
def closest_number(lst, target):
    return min(lst, key=lambda x: abs(x - target))


def get_full_scale_power_dBm_and_amplitude(desired_power: float, max_amplitude: float = 0.5) -> tuple[int, float]:
    """Get the full_scale_power_dbm and waveform amplitude for the MW FEM to output the specified desired power.

    The keyword `full_scale_power_dbm` is the maximum power of normalized pulse waveforms in [-1,1].
    To convert to voltage:
        power_mw = 10**(full_scale_power_dbm / 10)
        max_voltage_amp = np.sqrt(2 * power_mw * 50 / 1000)
        amp_in_volts = waveform * max_voltage_amp
        ^ equivalent to OPX+ amp
    Its range is -11dBm to +16dBm with 3dBm steps.

    Args:
        desired_power (float): Desired output power in dBm.
        max_amplitude (float, optional): Maximum allowed waveform amplitude in V. Default is 0.5V.

    Returns:
        tuple[float, float]: The full_scale_power_dBm and waveform amplitude realizing the desired power.
    """
    allowed_powers = [-11, -8, -5, -2, 1, 4, 7, 10, 13, 16]
    resulting_power = desired_power - 20 * np.log10(max_amplitude)
    if resulting_power < 0:
        full_scale_power_dBm = closest_number(allowed_powers, max(resulting_power + 3, -11))
    else:
        full_scale_power_dBm = closest_number(allowed_powers, min(resulting_power + 3, 16))
    amplitude = 10 ** ((desired_power - full_scale_power_dBm) / 20)
    if -11 <= full_scale_power_dBm <= 16 and -1 <= amplitude <= 1:
        return full_scale_power_dBm, amplitude
    else:
        raise ValueError(
            f"The desired power is outside the specifications ([-11; +16]dBm, [-1; +1]), got ({full_scale_power_dBm}; {amplitude})"
        )


########################################################################################################################
# %%                                    Readout parameters
########################################################################################################################
# The "output_mode" (LF-FEM) can be used to tailor the max voltage and frequency bandwidth, i.e.,
#   "direct":    1Vpp (-0.5V to 0.5V), 750MHz bandwidth
#   "amplified": 5Vpp (-2.5V to 2.5V), 350MHz bandwidth
# At 1 GS/s, use the "upsampling_mode" to optimize output for
#   modulated pulses (optimized for modulated pulses): "mw"
#   baseband pulses (optimized for clean step response): "pulse"

# Readout parameters
readout_time = 400  # in ns
laser_length = 3000  # in ns

# add laser
# digital_output = {
#     "DO1": DigitalOutputChannel(
#         opx_output=("con1", 1, 1),  # controller, slot, port
#         delay=57,  # 57ns for QOP222 and above
#         buffer=18,  # 18ns for QOP222 and above
#     )
# }
# machine.qubits.q1.laser = LaserLFDigital(digital_outputs=digital_output)

# Update qubit readout parameters
for k, qubit in enumerate(machine.qubits.values()):
    pass
    # qubit.laser.opx_output.output_mode = "direct"
    # qubit.laser.opx_output.upsampling_mode = "pulse"

# add second spcm if necessary
# opx_input = LFFEMAnalogInputPort(
#     controller_id="con1", fem_id=3, port_id=2
# ),
# opx_output = LFFEMAnalogOutputPort(
#     controller_id="con1", fem_id=3, port_id=4
# )
# time_tagging = TimeTaggingAddon(
#     signal_threshold=f"#/qubits/q1/spcm1/time_tagging/signal_threshold",
#     signal_polarity=f"#/qubits/q1/spcm1/time_tagging/signal_polarity",
#     derivative_threshold=f"#/qubits/q1/spcm1/time_tagging/derivative_threshold",
#     derivative_polarity=f"#/qubits/q1/spcm1/time_tagging/derivative_polarity",
#     enabled=True,
# )
# machine.qubits.q1.spcm2 = SPCM(
#     opx_output=opx_output,
#     opx_input=opx_input[0],  # why is this a tuple?
#     opx_input_offset=0.0,
#     time_of_flight=f"#/qubits/q1/spcm1/time_of_flight",
#     time_tagging=time_tagging,
# )
# machine.qubits.q1.spcm2.operations["readout"] = ReadoutPulse(
#     length=readout_time, digital_marker=None
# )


########################################################################################################################
# %%                                    Qubit parameters
########################################################################################################################
# The keyword "band" refers to the following frequency bands:
#   1: (50 MHz - 5.5 GHz)
#   2: (4.5 GHz - 7.5 GHz)
#   3: (6.5 GHz - 10.5 GHz)
# Note that the "coupled" ports O1 & I1, O2 & O3, O4 & O5, O6 & O7, and O8 & I2 must be in the same band.

# Qubit drive frequencies
xy_freq = np.array([2.87]) * u.GHz
xy_LO = np.array([3.2]) * u.GHz
xy_if = xy_freq - xy_LO  # The intermediate frequency is inferred from the LO and qubit frequencies
assert np.all(np.abs(xy_if) < 400 * u.MHz), (
    "The xy intermediate frequency must be within [-400; 400] MHz. \n"
    f"Qubit drive frequencies: {xy_freq} \n"
    f"Qubit drive LO frequencies: {xy_LO} \n"
    f"Qubit drive IF frequencies: {xy_if} \n"
)

# Desired output power in dBm
drive_power = -10
# Get the full_scale_power_dBm and waveform amplitude corresponding to the desired powers
xy_full_scale, xy_amplitude = get_full_scale_power_dBm_and_amplitude(drive_power)

# Update qubit xy freq and power
for k, qubit in enumerate(machine.qubits.values()):
    qubit.f_01 = xy_freq.tolist()[k]  # Qubit 0 to 1 (|g> -> |e>) transition frequency
    qubit.xy.RF_frequency = qubit.f_01  # Qubit drive frequency
    qubit.xy.opx_output.full_scale_power_dbm = xy_full_scale  # Max drive power in dBm
    qubit.xy.opx_output.upconverter_frequency = xy_LO.tolist()[k]  # Qubit drive up-converter frequency
    qubit.xy.opx_output.band = get_band(xy_LO.tolist()[k])  # Qubit drive band for the up-conversion
    qubit.grid_location = f"{k},0"  # Qubit grid location for plotting as "column,row"


########################################################################################################################
# %%                                        Pulse parameters
########################################################################################################################
x180_amplitudes = np.array([0.5])
x180_lengths = [64 * u.ns]

## Update pulses
for k, q in enumerate(machine.qubits):
    # readout
    if hasattr(machine.qubits[q], "laser") and machine.qubits[q].laser is not None:
        machine.qubits[q].laser.operations["laser_on"] = Pulse(length=laser_length, digital_marker="ON")
        machine.qubits[q].laser.operations["laser_off"] = Pulse(length="#../laser_on/length", digital_marker=[[0, 0]])
    machine.qubits[q].spcm1.operations["readout"].length = readout_time

    # Qubit cw pulse
    machine.qubits[q].xy.operations["cw"].length = 20 * u.us
    machine.qubits[q].xy.operations["cw"].amplitude = 0.1 * x180_amplitudes.tolist()[k]
    # Square drive pulses
    machine.qubits[q].xy.operations["x180"] = SquarePulse(amplitude=x180_amplitudes.tolist()[k], length=x180_lengths[k])
    machine.qubits[q].xy.operations["x90"] = SquarePulse(
        amplitude=x180_amplitudes.tolist()[k] / 2, length=x180_lengths[k]
    )
    # Gaussian drive pulses
    # machine.qubits[q].xy.operations["x180"] = GaussianPulse(
    #     amplitude=x180_amplitudes.tolist()[k], length=x180_lengths.tolist()[k], sigma=x180_lengths.tolist()[k] / 3
    # )
    # machine.qubits[q].xy.operations["x90"] = GaussianPulse(
    #     amplitude=x180_amplitudes.tolist()[k] / 2, length=x180_lengths.tolist()[k], sigma=x180_lengths.tolist()[k] / 3
    # )


########################################################################################################################
# %%                                         Save the updated QUAM
########################################################################################################################
# save into state.json
machine.save()
# Visualize the QUA config and save it
print(machine.generate_config())
with open("qua_config.json", "w+") as f:
    json.dump(machine.generate_config(), f, indent=4)
